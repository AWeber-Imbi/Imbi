paths:
  manage:
    get:
      summary: Get Project
      description: Retrieve a project record
      tags: [Projects]
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
    patch:
      summary: Update Project
      description: >-
        Update a project, providing a JSON Patch (RFC-6209) payload of update
        operations to apply.
      tags: [Projects]
      requestBody:
        description: JSON Patch Payload
        content:
          application/json: &patchContent
            schema:
              $ref: '../components/schemas.yaml#/jsonPatch'
          application/msgpack:
            <<: *patchContent
          application/json-patch+json:
            <<: *patchContent
          application/json-patch+msgpack:
            <<: *patchContent
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '304': { $ref: '../components/responses.yaml#/NoChanges' }
        '400': { $ref: '../components/responses.yaml#/RequestError' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
        '409': { $ref: '../components/responses.yaml#/Conflict' }
    delete:
      summary: Delete Project
      description: Remove a project record
      tags: [Projects]
      responses:
        '204': { $ref: '../components/responses.yaml#/RecordRemoved' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
    parameters:
      - name: id
        in: path
        description: Project ID
        required: true
        schema:
          type: number

components:
  examples:
    record:
      summary: An example of a project record
      value:
        id: 1
        created_by: test_user
        last_modified_by: ~
        namespace_id: 1
        namespace: User Experience
        project_type_id: 1
        project_type: HTTP API
        name: User Service
        slug: user
        description: |-
          The user service is used to manage user specific data, including profiles and content.
        data_center: us-east-1
        configuration_system: SSM Parameter Store
        deployment_type: ecs-pipeline-deploy
        orchestration_system: ECS
        environments:
          - Testing
          - Staging
          - Production

  responses:
    Success:
      description: The request to create, update, or retrieve the project was successful
      headers:
        Cache-Control: { $ref: '../components/headers.yaml#/Cache-Control' }
        Last-Modified: { $ref: '../components/headers.yaml#/Last-Modified' }
        Link: { $ref: '../components/headers.yaml#/Link' }
      content:
        application/json: &responsesSuccess
          schema:
            $ref: '../schemas/project.yaml#/read'
          examples:
            record:
              $ref: '#/components/examples/record'
        application/msgpack:
          <<: *responsesSuccess
